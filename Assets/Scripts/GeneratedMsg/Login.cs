// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public struct CSLogin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CSLogin GetRootAsCSLogin(ByteBuffer _bb) { return GetRootAsCSLogin(_bb, new CSLogin()); }
  public static CSLogin GetRootAsCSLogin(ByteBuffer _bb, CSLogin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CSLogin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AccountID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAccountIDBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetAccountIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAccountIDArray() { return __p.__vector_as_array<byte>(4); }
  public string DeviceUUID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDeviceUUIDBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetDeviceUUIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDeviceUUIDArray() { return __p.__vector_as_array<byte>(6); }
  public string AccessToken { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAccessTokenBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetAccessTokenBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAccessTokenArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<CSLogin> CreateCSLogin(FlatBufferBuilder builder,
      StringOffset AccountIDOffset = default(StringOffset),
      StringOffset DeviceUUIDOffset = default(StringOffset),
      StringOffset AccessTokenOffset = default(StringOffset)) {
    builder.StartObject(3);
    CSLogin.AddAccessToken(builder, AccessTokenOffset);
    CSLogin.AddDeviceUUID(builder, DeviceUUIDOffset);
    CSLogin.AddAccountID(builder, AccountIDOffset);
    return CSLogin.EndCSLogin(builder);
  }

  public static void StartCSLogin(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddAccountID(FlatBufferBuilder builder, StringOffset AccountIDOffset) { builder.AddOffset(0, AccountIDOffset.Value, 0); }
  public static void AddDeviceUUID(FlatBufferBuilder builder, StringOffset DeviceUUIDOffset) { builder.AddOffset(1, DeviceUUIDOffset.Value, 0); }
  public static void AddAccessToken(FlatBufferBuilder builder, StringOffset AccessTokenOffset) { builder.AddOffset(2, AccessTokenOffset.Value, 0); }
  public static Offset<CSLogin> EndCSLogin(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CSLogin>(o);
  }
};

public struct SCLogin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SCLogin GetRootAsSCLogin(ByteBuffer _bb) { return GetRootAsSCLogin(_bb, new SCLogin()); }
  public static SCLogin GetRootAsSCLogin(ByteBuffer _bb, SCLogin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SCLogin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public CommonErrorCode ErrorCode { get { int o = __p.__offset(4); return o != 0 ? (CommonErrorCode)__p.bb.GetSbyte(o + __p.bb_pos) : CommonErrorCode.Success; } }

  public static Offset<SCLogin> CreateSCLogin(FlatBufferBuilder builder,
      CommonErrorCode ErrorCode = CommonErrorCode.Success) {
    builder.StartObject(1);
    SCLogin.AddErrorCode(builder, ErrorCode);
    return SCLogin.EndSCLogin(builder);
  }

  public static void StartSCLogin(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddErrorCode(FlatBufferBuilder builder, CommonErrorCode ErrorCode) { builder.AddSbyte(0, (sbyte)ErrorCode, 0); }
  public static Offset<SCLogin> EndSCLogin(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SCLogin>(o);
  }
};

public struct CSLogout : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CSLogout GetRootAsCSLogout(ByteBuffer _bb) { return GetRootAsCSLogout(_bb, new CSLogout()); }
  public static CSLogout GetRootAsCSLogout(ByteBuffer _bb, CSLogout obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CSLogout __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartCSLogout(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<CSLogout> EndCSLogout(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CSLogout>(o);
  }
};

public struct SCLogout : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SCLogout GetRootAsSCLogout(ByteBuffer _bb) { return GetRootAsSCLogout(_bb, new SCLogout()); }
  public static SCLogout GetRootAsSCLogout(ByteBuffer _bb, SCLogout obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SCLogout __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public CommonErrorCode ErrorCode { get { int o = __p.__offset(4); return o != 0 ? (CommonErrorCode)__p.bb.GetSbyte(o + __p.bb_pos) : CommonErrorCode.Success; } }

  public static Offset<SCLogout> CreateSCLogout(FlatBufferBuilder builder,
      CommonErrorCode ErrorCode = CommonErrorCode.Success) {
    builder.StartObject(1);
    SCLogout.AddErrorCode(builder, ErrorCode);
    return SCLogout.EndSCLogout(builder);
  }

  public static void StartSCLogout(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddErrorCode(FlatBufferBuilder builder, CommonErrorCode ErrorCode) { builder.AddSbyte(0, (sbyte)ErrorCode, 0); }
  public static Offset<SCLogout> EndSCLogout(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SCLogout>(o);
  }
};

public struct CSEnterMap : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CSEnterMap GetRootAsCSEnterMap(ByteBuffer _bb) { return GetRootAsCSEnterMap(_bb, new CSEnterMap()); }
  public static CSEnterMap GetRootAsCSEnterMap(ByteBuffer _bb, CSEnterMap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CSEnterMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MapID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<CSEnterMap> CreateCSEnterMap(FlatBufferBuilder builder,
      int MapID = 0) {
    builder.StartObject(1);
    CSEnterMap.AddMapID(builder, MapID);
    return CSEnterMap.EndCSEnterMap(builder);
  }

  public static void StartCSEnterMap(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(0, MapID, 0); }
  public static Offset<CSEnterMap> EndCSEnterMap(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CSEnterMap>(o);
  }
};

public struct SCEnterMap : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SCEnterMap GetRootAsSCEnterMap(ByteBuffer _bb) { return GetRootAsSCEnterMap(_bb, new SCEnterMap()); }
  public static SCEnterMap GetRootAsSCEnterMap(ByteBuffer _bb, SCEnterMap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SCEnterMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MapID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public CommonErrorCode ErrorCode { get { int o = __p.__offset(6); return o != 0 ? (CommonErrorCode)__p.bb.GetSbyte(o + __p.bb_pos) : CommonErrorCode.Success; } }

  public static Offset<SCEnterMap> CreateSCEnterMap(FlatBufferBuilder builder,
      int MapID = 0,
      CommonErrorCode ErrorCode = CommonErrorCode.Success) {
    builder.StartObject(2);
    SCEnterMap.AddMapID(builder, MapID);
    SCEnterMap.AddErrorCode(builder, ErrorCode);
    return SCEnterMap.EndSCEnterMap(builder);
  }

  public static void StartSCEnterMap(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(0, MapID, 0); }
  public static void AddErrorCode(FlatBufferBuilder builder, CommonErrorCode ErrorCode) { builder.AddSbyte(1, (sbyte)ErrorCode, 0); }
  public static Offset<SCEnterMap> EndSCEnterMap(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SCEnterMap>(o);
  }
};

